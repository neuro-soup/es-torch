syntax = "proto3";

package distributed;

import "google/protobuf/timestamp.proto";

message Slice {
  int32 start = 1;
  int32 end = 2;
}

message HeartbeatRequest {
  int32 id = 1;
  google.protobuf.Timestamp timestamp = 2;
}

message HeartbeatResponse {
  bool ok = 1;
}

message DoneRequest {
  int32 id = 1;
  Slice slice = 2;
  repeated bytes batch_rewards = 3;
}

message DoneResponse {}

message SendStateRequest {
  int32 id = 1;
  bytes state = 2;
}

message SendStateResponse {}

enum ServerEventType {
  UNKNOWN = 0;
  SEND_STATE = 1;
  EVALUATE_BATCH = 2;
  STATE_UPDATE = 3;
  OPTIM_STEP = 4;
  HELLO = 5;
}

message SubscribeRequest {
  // number of CPUs available on the node
  int32 num_cpus = 1;

  // number of population to be evaluated
  int32 num_pop = 2;

  string device = 3;
}

message SendStateEvent {
  string device = 1;
}

message EvaluateBatchEvent {
  Slice pop_slice = 1; // TODO: repeated slice
}

message OptimStepEvent {
  bool logging = 1;
  repeated bytes rewards = 2; // n_pop floats 
}

message HelloEvent {
  int32 id = 1;
  optional bytes init_state = 2;
}

message SendStateEvent {
  string device = 1;
}

message EvaluateBatchEvent {
  Slice pop_slice = 1; // TODO: repeated slice
}

message OptimStepEvent {
  bool logging = 1;
  repeated bytes rewards = 2; // n_pop floats 
}

message HelloEvent {
  int32 id = 1;
  optional bytes init_state = 2;
}

message SubscribeResponse {
  ServerEventType type = 1;

  oneof event {
    SendStateEvent send_state = 2;
    EvaluateBatchEvent evaluate_batch = 3;
    OptimStepEvent optim_step = 4;
    HelloEvent hello = 5;
  }
}

service ESService {
  // epoch is done
  rpc Done(DoneRequest) returns (DoneResponse) {}

  // worker heartbeat
  rpc Heartbeat(HeartbeatRequest) returns (HeartbeatResponse) {}

  // send state if server demands it
  rpc SendState(SendStateRequest) returns (SendStateResponse) {}

  // subscribe to server events
  rpc Subscribe(SubscribeRequest) returns (stream SubscribeResponse) {}
}
