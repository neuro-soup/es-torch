syntax = "proto3";

package es;

import "google/protobuf/timestamp.proto";

message HelloRequest {
  int32 num_cpus = 1;
}

message HelloResponse {
  int32 id = 1;
  bytes state = 2;
}

message HeartbeatRequest {
  int32 id = 1;
  google.protobuf.Timestamp timestamp = 2;
}

message HeartbeatResponse {
  bool ok = 1;
}

message DoneRequest {
  int32 id = 1;
  bytes reward = 2;
}

message DoneResponse {}

message SendStateRequest {
  int32 id = 1;
  bytes state = 2;
}

message SendStateResponse {}

enum ServerEventType {
  UNKNOWN = 0;
  SEND_STATE = 1;
  NEXT_EPOCH = 2;
  STATE_UPDATE = 3;
}

message SubscribeRequest {
  int32 id = 1;
}

message SubscribeResponse {
  ServerEventType type = 1;

  // only for NEXT_EPOCH
  repeated bytes rewards = 2;

  // only for STATE_UPDATE
  optional bytes updated_state = 3;
}

service ESService {
  // worker joins
  rpc Hello(HelloRequest) returns (HelloResponse) {}

  // epoch is done
  rpc Done(DoneRequest) returns (DoneResponse) {}

  // worker heartbeat
  rpc Heartbeat(HeartbeatRequest) returns (HeartbeatResponse) {}

  // send state if server demands it
  rpc SendState(SendStateRequest) returns (SendStateResponse) {}
  
  // subscribe to server events
  rpc Subscribe(SubscribeRequest) returns (stream SubscribeResponse) {}
}
