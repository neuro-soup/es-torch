// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: es/es.proto

package esconnect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	es "github.com/neuro-soup/es-torch/server/pkg/proto/es"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// ESServiceName is the fully-qualified name of the ESService service.
	ESServiceName = "es.ESService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ESServiceHelloProcedure is the fully-qualified name of the ESService's Hello RPC.
	ESServiceHelloProcedure = "/es.ESService/Hello"
	// ESServiceDoneProcedure is the fully-qualified name of the ESService's Done RPC.
	ESServiceDoneProcedure = "/es.ESService/Done"
	// ESServiceHeartbeatProcedure is the fully-qualified name of the ESService's Heartbeat RPC.
	ESServiceHeartbeatProcedure = "/es.ESService/Heartbeat"
	// ESServiceSendStateProcedure is the fully-qualified name of the ESService's SendState RPC.
	ESServiceSendStateProcedure = "/es.ESService/SendState"
	// ESServiceSubscribeProcedure is the fully-qualified name of the ESService's Subscribe RPC.
	ESServiceSubscribeProcedure = "/es.ESService/Subscribe"
)

// ESServiceClient is a client for the es.ESService service.
type ESServiceClient interface {
	// worker joins
	Hello(context.Context, *connect_go.Request[es.HelloRequest]) (*connect_go.Response[es.HelloResponse], error)
	// epoch is done
	Done(context.Context, *connect_go.Request[es.DoneRequest]) (*connect_go.Response[es.DoneResponse], error)
	// worker heartbeat
	Heartbeat(context.Context, *connect_go.Request[es.HeartbeatRequest]) (*connect_go.Response[es.HeartbeatResponse], error)
	// send state if server demands it
	SendState(context.Context, *connect_go.Request[es.SendStateRequest]) (*connect_go.Response[es.SendStateResponse], error)
	// subscribe to server events
	Subscribe(context.Context, *connect_go.Request[es.SubscribeRequest]) (*connect_go.ServerStreamForClient[es.SubscribeResponse], error)
}

// NewESServiceClient constructs a client for the es.ESService service. By default, it uses the
// Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewESServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) ESServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &eSServiceClient{
		hello: connect_go.NewClient[es.HelloRequest, es.HelloResponse](
			httpClient,
			baseURL+ESServiceHelloProcedure,
			opts...,
		),
		done: connect_go.NewClient[es.DoneRequest, es.DoneResponse](
			httpClient,
			baseURL+ESServiceDoneProcedure,
			opts...,
		),
		heartbeat: connect_go.NewClient[es.HeartbeatRequest, es.HeartbeatResponse](
			httpClient,
			baseURL+ESServiceHeartbeatProcedure,
			opts...,
		),
		sendState: connect_go.NewClient[es.SendStateRequest, es.SendStateResponse](
			httpClient,
			baseURL+ESServiceSendStateProcedure,
			opts...,
		),
		subscribe: connect_go.NewClient[es.SubscribeRequest, es.SubscribeResponse](
			httpClient,
			baseURL+ESServiceSubscribeProcedure,
			opts...,
		),
	}
}

// eSServiceClient implements ESServiceClient.
type eSServiceClient struct {
	hello     *connect_go.Client[es.HelloRequest, es.HelloResponse]
	done      *connect_go.Client[es.DoneRequest, es.DoneResponse]
	heartbeat *connect_go.Client[es.HeartbeatRequest, es.HeartbeatResponse]
	sendState *connect_go.Client[es.SendStateRequest, es.SendStateResponse]
	subscribe *connect_go.Client[es.SubscribeRequest, es.SubscribeResponse]
}

// Hello calls es.ESService.Hello.
func (c *eSServiceClient) Hello(ctx context.Context, req *connect_go.Request[es.HelloRequest]) (*connect_go.Response[es.HelloResponse], error) {
	return c.hello.CallUnary(ctx, req)
}

// Done calls es.ESService.Done.
func (c *eSServiceClient) Done(ctx context.Context, req *connect_go.Request[es.DoneRequest]) (*connect_go.Response[es.DoneResponse], error) {
	return c.done.CallUnary(ctx, req)
}

// Heartbeat calls es.ESService.Heartbeat.
func (c *eSServiceClient) Heartbeat(ctx context.Context, req *connect_go.Request[es.HeartbeatRequest]) (*connect_go.Response[es.HeartbeatResponse], error) {
	return c.heartbeat.CallUnary(ctx, req)
}

// SendState calls es.ESService.SendState.
func (c *eSServiceClient) SendState(ctx context.Context, req *connect_go.Request[es.SendStateRequest]) (*connect_go.Response[es.SendStateResponse], error) {
	return c.sendState.CallUnary(ctx, req)
}

// Subscribe calls es.ESService.Subscribe.
func (c *eSServiceClient) Subscribe(ctx context.Context, req *connect_go.Request[es.SubscribeRequest]) (*connect_go.ServerStreamForClient[es.SubscribeResponse], error) {
	return c.subscribe.CallServerStream(ctx, req)
}

// ESServiceHandler is an implementation of the es.ESService service.
type ESServiceHandler interface {
	// worker joins
	Hello(context.Context, *connect_go.Request[es.HelloRequest]) (*connect_go.Response[es.HelloResponse], error)
	// epoch is done
	Done(context.Context, *connect_go.Request[es.DoneRequest]) (*connect_go.Response[es.DoneResponse], error)
	// worker heartbeat
	Heartbeat(context.Context, *connect_go.Request[es.HeartbeatRequest]) (*connect_go.Response[es.HeartbeatResponse], error)
	// send state if server demands it
	SendState(context.Context, *connect_go.Request[es.SendStateRequest]) (*connect_go.Response[es.SendStateResponse], error)
	// subscribe to server events
	Subscribe(context.Context, *connect_go.Request[es.SubscribeRequest], *connect_go.ServerStream[es.SubscribeResponse]) error
}

// NewESServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewESServiceHandler(svc ESServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle(ESServiceHelloProcedure, connect_go.NewUnaryHandler(
		ESServiceHelloProcedure,
		svc.Hello,
		opts...,
	))
	mux.Handle(ESServiceDoneProcedure, connect_go.NewUnaryHandler(
		ESServiceDoneProcedure,
		svc.Done,
		opts...,
	))
	mux.Handle(ESServiceHeartbeatProcedure, connect_go.NewUnaryHandler(
		ESServiceHeartbeatProcedure,
		svc.Heartbeat,
		opts...,
	))
	mux.Handle(ESServiceSendStateProcedure, connect_go.NewUnaryHandler(
		ESServiceSendStateProcedure,
		svc.SendState,
		opts...,
	))
	mux.Handle(ESServiceSubscribeProcedure, connect_go.NewServerStreamHandler(
		ESServiceSubscribeProcedure,
		svc.Subscribe,
		opts...,
	))
	return "/es.ESService/", mux
}

// UnimplementedESServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedESServiceHandler struct{}

func (UnimplementedESServiceHandler) Hello(context.Context, *connect_go.Request[es.HelloRequest]) (*connect_go.Response[es.HelloResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("es.ESService.Hello is not implemented"))
}

func (UnimplementedESServiceHandler) Done(context.Context, *connect_go.Request[es.DoneRequest]) (*connect_go.Response[es.DoneResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("es.ESService.Done is not implemented"))
}

func (UnimplementedESServiceHandler) Heartbeat(context.Context, *connect_go.Request[es.HeartbeatRequest]) (*connect_go.Response[es.HeartbeatResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("es.ESService.Heartbeat is not implemented"))
}

func (UnimplementedESServiceHandler) SendState(context.Context, *connect_go.Request[es.SendStateRequest]) (*connect_go.Response[es.SendStateResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("es.ESService.SendState is not implemented"))
}

func (UnimplementedESServiceHandler) Subscribe(context.Context, *connect_go.Request[es.SubscribeRequest], *connect_go.ServerStream[es.SubscribeResponse]) error {
	return connect_go.NewError(connect_go.CodeUnimplemented, errors.New("es.ESService.Subscribe is not implemented"))
}
